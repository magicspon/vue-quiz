/*
	example:
	line-height: leading(14px, 30) (font size 14px, line-height 30px (from psd))
*/
@function leading($font-size, $computed) {
  $fs: strip-units($font-size);
  @return $computed / $fs;
}

@mixin type-reveal($selector: ".site") {
  #{unquote($selector)} {
    transition: opacity .4s;
    opacity: 0;
    .fonts-loaded &,
    .fonts-failed & {
      opacity: 1;
    }
  }

  .no-js {
    #{unquote($selector)} {
      opacity: 1;
    }
  }
}

/*
	example:
	font-family: font('bold')
*/
@function font($type: default) {
    @return map-get($fonts, $type);
}

/*
	example:
	@include font-size(14px, 30)
*/

@mixin font-size($font-size, $line-height: true) {
  @if $debug == true {
    font-size: $font-size * 1px;
  } @else {
    font-size: ($font-size / $base-font-size) * 1rem;
  }

  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }

  @elseif $line-height != false {
    @if type-of($line-height) == number {
      @if unitless($line-height) {
        line-height: leading($font-size, $line-height);
      }
    }
  }
}


/*
	example, this is just a wrapper around leading function
	@include line-height(14px, 30)
*/

@mixin line-height($font-size, $line-height: true) {
  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }
  @if unitless($line-height) {
    line-height: leading($font-size, $line-height);
  }
}

@mixin font-baseline($font-size: $base-font-size, $line-height:  $base-line-height, $default:$browser-default-font-size) {
  font-size: $base-font-size / $browser-default-font-size + em;
  line-height: $base-line-height / $base-font-size; /* [2] */
}


@mixin baseline($baseline: $magic-number) {
  html {
    $size: strip-units($baseline);
    background-image: url(http://basehold.it/i/#{$size});
  }
}

/*
	resp size helpter function
*/

@function type-group($name: 'mobile', $prop: 'body') {
    @return map-get(map-get($font-sizes, $name), $prop);
}


/*
	flexible type
	@include resp-size(14px, 18px);
*/


@mixin resp-size($min: $min-font, $max: $max-font, $line-height-multiple: false) {
  $local-line-height: strip-units($desktop-line-height);

	font-size: rem($min);

	@if(type-of($line-height-multiple) == number or $line-height-multiple == true) {
		line-height: ($local-line-height) / strip-units($max);
	}

	@if(type-of($line-height-multiple) == boolean and $line-height-multiple == false) {
		line-height: $desktop-line-height / $min;
	}

	@if strip-units($max) != strip-units($min) {
		@include mq($from: breakpoint('mobile')) {
	  	font-size: calc( #{strip-units($min)}px + (#{strip-units($max)} - #{strip-units($min)}) * ((100vw - #{breakpoint('mobile')}) / (#{strip-units(breakpoint('desktop'))} - #{strip-units(breakpoint('mobile'))})) );
		}

		@include mq($from: breakpoint('desktop')) {
			font-size: rem($max);
		}
	}
}

/*
	flexible type
	@include resp-map('modal-heading');
*/
@mixin resp-map($value, $leading: false) {
	$min: if(type-group('mobile', $value), type-group('mobile', $value), type-group('desktop', $value));
	$max: if(type-group('desktop', $value), type-group('desktop', $value), type-group('mobile', $value));

	@if $min == null or $max == null {
		@warn 'No such font group was found, please check the $font-sizes map';
	} @else {
		@include resp-size($min, $max, $leading)
	}
}
